// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  email               String        @unique
  firstName           String?
  lastName            String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               Role[]        @default([CLIENT])
  workRequest         WorkRequest[]
  address             Address[]
  jobProfile          JobProfile[]
  certificate         Certificate[]
}

enum Role {
  CLIENT
  ADMIN
}

model WorkRequest {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  projectName  String
  jobProfile   JobProfile        @relation(fields: [jobProfileId], references: [id])
  jobProfileId String
  startDate    DateTime
  endDate      DateTime
  numWorkers   Int
  shifts       Shift[]
  location     Address           @relation(fields: [addressId], references: [id])
  addressId    String
  status       WorkRequestStatus @default(DRAFT)
  createdBy    User?             @relation(fields: [userId], references: [id])
  userId       String?
}

enum WorkRequestStatus {
  DRAFT
  SUBMITTED
  CONFIRMED
  DONE
}

model Address {
  id                  String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  street              String
  houseNumber         String
  houseNumberAddition String?
  postalCode          String
  city                String
  province            String
  country             String        @default("Netherlands")
  workRequest         WorkRequest[]
  createdBy           User?         @relation(fields: [userId], references: [id])
  userId              String?
  TempAgency          TempAgency[]
}

model JobProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  qualityNeeded      Int
  yearsOfExp         Int
  certificates       Certificate[]
  hourlyWageMin      Float
  hourlyWageMax      Float
  maxTravelDistance  Float?
  isTravelReimbursed Boolean?
  isCarAvailable     Boolean?
  kmAllowance        Float?
  totalBudgetPerHour Float?
  comment            String?
  workRequest        WorkRequest[]
  createdBy          User?         @relation(fields: [userId], references: [id])
  userId             String?
}

model Certificate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  issuingBody String?
  uri         String? @unique

  jobProfile   JobProfile? @relation(fields: [jobProfileId], references: [id])
  jobProfileId String?

  createdBy User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model TempAgency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  phone     String
  email     String
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?
}

model Shift {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        ShiftStatus  @default(UNFULFILLED)
  workRequest   WorkRequest? @relation(fields: [workRequestId], references: [id])
  workRequestId String?
  rating        Int?
}

enum ShiftStatus {
  UNFULFILLED
  FULFILLED
}
